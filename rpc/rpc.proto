syntax = "proto3";

package rpc;

//import "github.com/hexablock/hexalog/types.proto";
import "github.com/hexablock/blockring/structs/structs.proto";
import "github.com/ipkg/go-chord/net.proto";

service BlockRPC {
    rpc GetBlockRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc SetBlockRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc TransferBlockRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc ReleaseBlockRPC(BlockRPCData) returns (BlockRPCData) {}
}

service LocateRPC {
    rpc LookupKeyRPC(LocateRequest) returns (LocateResponse) {}
    rpc LookupHashRPC(LocateRequest) returns (LocateResponse) {}
    rpc LocateReplicatedKeyRPC(LocateRequest) returns (LocateResponse) {}
    rpc LocateReplicatedHashRPC(LocateRequest) returns (LocateResponse) {}
    rpc NegotiateRPC(NegotiateRequest) returns (NegotiateResponse) {}
}

service LogRPC {
    rpc NewEntryRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc GetEntryRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc ProposeEntryRPC(BlockRPCData) returns (BlockRPCData) {}
    rpc CommitEntryRPC(BlockRPCData) returns (BlockRPCData) {}
}

message BlockRPCData{
    bytes ID = 1;
    structs.Block Block = 2;
    structs.Location Location = 3;
    structs.RequestOptions Options = 4;
}

message LocateRequest {
    bytes Key = 1;
    int32 N = 2;
}

message LocateResponse {
    bytes KeyHash = 1;
    chord.Vnode Predecessor = 2;
    repeated chord.Vnode Successors = 3;
    repeated structs.Location Locations = 4;
}

message NegotiateRequest {
    bytes Key = 1;
}

message NegotiateResponse {
    int32 Successors = 1;
    int32 Vnodes = 2;
    repeated string Peers = 3;
}

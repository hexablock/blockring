// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	LogRPCData
	BlockRPCData
	LocateRequest
	LocateResponse
	NegotiateRequest
	NegotiateResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import structs "github.com/hexablock/blockring/structs"
import hexalog "github.com/hexablock/hexalog"
import chord "github.com/ipkg/go-chord"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogRPCData struct {
	Id      []byte           `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	Entry   *hexalog.Entry   `protobuf:"bytes,2,opt,name=Entry,json=entry" json:"Entry,omitempty"`
	Options *hexalog.Options `protobuf:"bytes,3,opt,name=Options,json=options" json:"Options,omitempty"`
	Meta    *hexalog.Meta    `protobuf:"bytes,4,opt,name=Meta,json=meta" json:"Meta,omitempty"`
}

func (m *LogRPCData) Reset()                    { *m = LogRPCData{} }
func (m *LogRPCData) String() string            { return proto.CompactTextString(m) }
func (*LogRPCData) ProtoMessage()               {}
func (*LogRPCData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogRPCData) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogRPCData) GetEntry() *hexalog.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *LogRPCData) GetOptions() *hexalog.Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *LogRPCData) GetMeta() *hexalog.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type BlockRPCData struct {
	ID       []byte            `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Block    *structs.Block    `protobuf:"bytes,2,opt,name=Block,json=block" json:"Block,omitempty"`
	Location *structs.Location `protobuf:"bytes,3,opt,name=Location,json=location" json:"Location,omitempty"`
}

func (m *BlockRPCData) Reset()                    { *m = BlockRPCData{} }
func (m *BlockRPCData) String() string            { return proto.CompactTextString(m) }
func (*BlockRPCData) ProtoMessage()               {}
func (*BlockRPCData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockRPCData) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *BlockRPCData) GetBlock() *structs.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRPCData) GetLocation() *structs.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type LocateRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	N   int32  `protobuf:"varint,2,opt,name=N,json=n" json:"N,omitempty"`
}

func (m *LocateRequest) Reset()                    { *m = LocateRequest{} }
func (m *LocateRequest) String() string            { return proto.CompactTextString(m) }
func (*LocateRequest) ProtoMessage()               {}
func (*LocateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LocateRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LocateRequest) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type LocateResponse struct {
	KeyHash     []byte              `protobuf:"bytes,1,opt,name=KeyHash,json=keyHash,proto3" json:"KeyHash,omitempty"`
	Predecessor *chord.Vnode        `protobuf:"bytes,2,opt,name=Predecessor,json=predecessor" json:"Predecessor,omitempty"`
	Successors  []*chord.Vnode      `protobuf:"bytes,3,rep,name=Successors,json=successors" json:"Successors,omitempty"`
	Locations   []*structs.Location `protobuf:"bytes,4,rep,name=Locations,json=locations" json:"Locations,omitempty"`
}

func (m *LocateResponse) Reset()                    { *m = LocateResponse{} }
func (m *LocateResponse) String() string            { return proto.CompactTextString(m) }
func (*LocateResponse) ProtoMessage()               {}
func (*LocateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LocateResponse) GetKeyHash() []byte {
	if m != nil {
		return m.KeyHash
	}
	return nil
}

func (m *LocateResponse) GetPredecessor() *chord.Vnode {
	if m != nil {
		return m.Predecessor
	}
	return nil
}

func (m *LocateResponse) GetSuccessors() []*chord.Vnode {
	if m != nil {
		return m.Successors
	}
	return nil
}

func (m *LocateResponse) GetLocations() []*structs.Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

type NegotiateRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
}

func (m *NegotiateRequest) Reset()                    { *m = NegotiateRequest{} }
func (m *NegotiateRequest) String() string            { return proto.CompactTextString(m) }
func (*NegotiateRequest) ProtoMessage()               {}
func (*NegotiateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NegotiateRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type NegotiateResponse struct {
	Successors int32    `protobuf:"varint,1,opt,name=Successors,json=successors" json:"Successors,omitempty"`
	Vnodes     int32    `protobuf:"varint,2,opt,name=Vnodes,json=vnodes" json:"Vnodes,omitempty"`
	Peers      []string `protobuf:"bytes,3,rep,name=Peers,json=peers" json:"Peers,omitempty"`
}

func (m *NegotiateResponse) Reset()                    { *m = NegotiateResponse{} }
func (m *NegotiateResponse) String() string            { return proto.CompactTextString(m) }
func (*NegotiateResponse) ProtoMessage()               {}
func (*NegotiateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NegotiateResponse) GetSuccessors() int32 {
	if m != nil {
		return m.Successors
	}
	return 0
}

func (m *NegotiateResponse) GetVnodes() int32 {
	if m != nil {
		return m.Vnodes
	}
	return 0
}

func (m *NegotiateResponse) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*LogRPCData)(nil), "rpc.LogRPCData")
	proto.RegisterType((*BlockRPCData)(nil), "rpc.BlockRPCData")
	proto.RegisterType((*LocateRequest)(nil), "rpc.LocateRequest")
	proto.RegisterType((*LocateResponse)(nil), "rpc.LocateResponse")
	proto.RegisterType((*NegotiateRequest)(nil), "rpc.NegotiateRequest")
	proto.RegisterType((*NegotiateResponse)(nil), "rpc.NegotiateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlockRPC service

type BlockRPCClient interface {
	GetBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error)
	SetBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error)
	TransferBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error)
	ReleaseBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error)
}

type blockRPCClient struct {
	cc *grpc.ClientConn
}

func NewBlockRPCClient(cc *grpc.ClientConn) BlockRPCClient {
	return &blockRPCClient{cc}
}

func (c *blockRPCClient) GetBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error) {
	out := new(BlockRPCData)
	err := grpc.Invoke(ctx, "/rpc.BlockRPC/GetBlockRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockRPCClient) SetBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error) {
	out := new(BlockRPCData)
	err := grpc.Invoke(ctx, "/rpc.BlockRPC/SetBlockRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockRPCClient) TransferBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error) {
	out := new(BlockRPCData)
	err := grpc.Invoke(ctx, "/rpc.BlockRPC/TransferBlockRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockRPCClient) ReleaseBlockRPC(ctx context.Context, in *BlockRPCData, opts ...grpc.CallOption) (*BlockRPCData, error) {
	out := new(BlockRPCData)
	err := grpc.Invoke(ctx, "/rpc.BlockRPC/ReleaseBlockRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockRPC service

type BlockRPCServer interface {
	GetBlockRPC(context.Context, *BlockRPCData) (*BlockRPCData, error)
	SetBlockRPC(context.Context, *BlockRPCData) (*BlockRPCData, error)
	TransferBlockRPC(context.Context, *BlockRPCData) (*BlockRPCData, error)
	ReleaseBlockRPC(context.Context, *BlockRPCData) (*BlockRPCData, error)
}

func RegisterBlockRPCServer(s *grpc.Server, srv BlockRPCServer) {
	s.RegisterService(&_BlockRPC_serviceDesc, srv)
}

func _BlockRPC_GetBlockRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockRPCServer).GetBlockRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BlockRPC/GetBlockRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockRPCServer).GetBlockRPC(ctx, req.(*BlockRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockRPC_SetBlockRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockRPCServer).SetBlockRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BlockRPC/SetBlockRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockRPCServer).SetBlockRPC(ctx, req.(*BlockRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockRPC_TransferBlockRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockRPCServer).TransferBlockRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BlockRPC/TransferBlockRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockRPCServer).TransferBlockRPC(ctx, req.(*BlockRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockRPC_ReleaseBlockRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockRPCServer).ReleaseBlockRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BlockRPC/ReleaseBlockRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockRPCServer).ReleaseBlockRPC(ctx, req.(*BlockRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BlockRPC",
	HandlerType: (*BlockRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockRPC",
			Handler:    _BlockRPC_GetBlockRPC_Handler,
		},
		{
			MethodName: "SetBlockRPC",
			Handler:    _BlockRPC_SetBlockRPC_Handler,
		},
		{
			MethodName: "TransferBlockRPC",
			Handler:    _BlockRPC_TransferBlockRPC_Handler,
		},
		{
			MethodName: "ReleaseBlockRPC",
			Handler:    _BlockRPC_ReleaseBlockRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for LocateRPC service

type LocateRPCClient interface {
	LookupKeyRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
	LookupHashRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
	LocateReplicatedKeyRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
	LocateReplicatedHashRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
	NegotiateRPC(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateResponse, error)
}

type locateRPCClient struct {
	cc *grpc.ClientConn
}

func NewLocateRPCClient(cc *grpc.ClientConn) LocateRPCClient {
	return &locateRPCClient{cc}
}

func (c *locateRPCClient) LookupKeyRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := grpc.Invoke(ctx, "/rpc.LocateRPC/LookupKeyRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locateRPCClient) LookupHashRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := grpc.Invoke(ctx, "/rpc.LocateRPC/LookupHashRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locateRPCClient) LocateReplicatedKeyRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := grpc.Invoke(ctx, "/rpc.LocateRPC/LocateReplicatedKeyRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locateRPCClient) LocateReplicatedHashRPC(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := grpc.Invoke(ctx, "/rpc.LocateRPC/LocateReplicatedHashRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locateRPCClient) NegotiateRPC(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateResponse, error) {
	out := new(NegotiateResponse)
	err := grpc.Invoke(ctx, "/rpc.LocateRPC/NegotiateRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocateRPC service

type LocateRPCServer interface {
	LookupKeyRPC(context.Context, *LocateRequest) (*LocateResponse, error)
	LookupHashRPC(context.Context, *LocateRequest) (*LocateResponse, error)
	LocateReplicatedKeyRPC(context.Context, *LocateRequest) (*LocateResponse, error)
	LocateReplicatedHashRPC(context.Context, *LocateRequest) (*LocateResponse, error)
	NegotiateRPC(context.Context, *NegotiateRequest) (*NegotiateResponse, error)
}

func RegisterLocateRPCServer(s *grpc.Server, srv LocateRPCServer) {
	s.RegisterService(&_LocateRPC_serviceDesc, srv)
}

func _LocateRPC_LookupKeyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocateRPCServer).LookupKeyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LocateRPC/LookupKeyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocateRPCServer).LookupKeyRPC(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocateRPC_LookupHashRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocateRPCServer).LookupHashRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LocateRPC/LookupHashRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocateRPCServer).LookupHashRPC(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocateRPC_LocateReplicatedKeyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocateRPCServer).LocateReplicatedKeyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LocateRPC/LocateReplicatedKeyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocateRPCServer).LocateReplicatedKeyRPC(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocateRPC_LocateReplicatedHashRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocateRPCServer).LocateReplicatedHashRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LocateRPC/LocateReplicatedHashRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocateRPCServer).LocateReplicatedHashRPC(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocateRPC_NegotiateRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocateRPCServer).NegotiateRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LocateRPC/NegotiateRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocateRPCServer).NegotiateRPC(ctx, req.(*NegotiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocateRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.LocateRPC",
	HandlerType: (*LocateRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupKeyRPC",
			Handler:    _LocateRPC_LookupKeyRPC_Handler,
		},
		{
			MethodName: "LookupHashRPC",
			Handler:    _LocateRPC_LookupHashRPC_Handler,
		},
		{
			MethodName: "LocateReplicatedKeyRPC",
			Handler:    _LocateRPC_LocateReplicatedKeyRPC_Handler,
		},
		{
			MethodName: "LocateReplicatedHashRPC",
			Handler:    _LocateRPC_LocateReplicatedHashRPC_Handler,
		},
		{
			MethodName: "NegotiateRPC",
			Handler:    _LocateRPC_NegotiateRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for LogRPC service

type LogRPCClient interface {
	NewEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error)
	GetEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error)
	ProposeEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error)
	CommitEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error)
}

type logRPCClient struct {
	cc *grpc.ClientConn
}

func NewLogRPCClient(cc *grpc.ClientConn) LogRPCClient {
	return &logRPCClient{cc}
}

func (c *logRPCClient) NewEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error) {
	out := new(LogRPCData)
	err := grpc.Invoke(ctx, "/rpc.LogRPC/NewEntryRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRPCClient) GetEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error) {
	out := new(LogRPCData)
	err := grpc.Invoke(ctx, "/rpc.LogRPC/GetEntryRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRPCClient) ProposeEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error) {
	out := new(LogRPCData)
	err := grpc.Invoke(ctx, "/rpc.LogRPC/ProposeEntryRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRPCClient) CommitEntryRPC(ctx context.Context, in *LogRPCData, opts ...grpc.CallOption) (*LogRPCData, error) {
	out := new(LogRPCData)
	err := grpc.Invoke(ctx, "/rpc.LogRPC/CommitEntryRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogRPC service

type LogRPCServer interface {
	NewEntryRPC(context.Context, *LogRPCData) (*LogRPCData, error)
	GetEntryRPC(context.Context, *LogRPCData) (*LogRPCData, error)
	ProposeEntryRPC(context.Context, *LogRPCData) (*LogRPCData, error)
	CommitEntryRPC(context.Context, *LogRPCData) (*LogRPCData, error)
}

func RegisterLogRPCServer(s *grpc.Server, srv LogRPCServer) {
	s.RegisterService(&_LogRPC_serviceDesc, srv)
}

func _LogRPC_NewEntryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRPCServer).NewEntryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LogRPC/NewEntryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRPCServer).NewEntryRPC(ctx, req.(*LogRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRPC_GetEntryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRPCServer).GetEntryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LogRPC/GetEntryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRPCServer).GetEntryRPC(ctx, req.(*LogRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRPC_ProposeEntryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRPCServer).ProposeEntryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LogRPC/ProposeEntryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRPCServer).ProposeEntryRPC(ctx, req.(*LogRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRPC_CommitEntryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRPCData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRPCServer).CommitEntryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.LogRPC/CommitEntryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRPCServer).CommitEntryRPC(ctx, req.(*LogRPCData))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.LogRPC",
	HandlerType: (*LogRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEntryRPC",
			Handler:    _LogRPC_NewEntryRPC_Handler,
		},
		{
			MethodName: "GetEntryRPC",
			Handler:    _LogRPC_GetEntryRPC_Handler,
		},
		{
			MethodName: "ProposeEntryRPC",
			Handler:    _LogRPC_ProposeEntryRPC_Handler,
		},
		{
			MethodName: "CommitEntryRPC",
			Handler:    _LogRPC_CommitEntryRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x5e, 0xfa, 0xbb, 0x9e, 0x76, 0x5d, 0x67, 0x60, 0x54, 0xbd, 0x40, 0x23, 0xda, 0xc5, 0x84,
	0x58, 0x22, 0xca, 0x76, 0x31, 0x6e, 0x90, 0x68, 0xd1, 0x40, 0x1b, 0xa3, 0xca, 0x10, 0xf7, 0x59,
	0x72, 0x48, 0xa3, 0xb6, 0xb1, 0xb1, 0x5d, 0x20, 0x8f, 0xc1, 0xe3, 0xf0, 0x12, 0xbc, 0x00, 0x0f,
	0xc1, 0x2b, 0x20, 0x3b, 0x4e, 0xd6, 0x75, 0x13, 0x52, 0x76, 0xd3, 0xf8, 0x7c, 0xfe, 0x3e, 0x9f,
	0xef, 0x1c, 0x9f, 0x1a, 0x5a, 0x9c, 0x05, 0x0e, 0xe3, 0x54, 0x52, 0x52, 0xe5, 0x2c, 0x18, 0x1c,
	0x45, 0xb1, 0x9c, 0x2e, 0xaf, 0x9c, 0x80, 0x2e, 0xdc, 0x29, 0xfe, 0xf0, 0xaf, 0xe6, 0x34, 0x98,
	0xb9, 0xfa, 0x97, 0xc7, 0x49, 0xe4, 0x0a, 0xc9, 0x97, 0x81, 0x14, 0xf9, 0x37, 0x93, 0x0e, 0x0e,
	0xee, 0x54, 0xa9, 0xd5, 0x9c, 0x46, 0xae, 0x4c, 0x19, 0xe6, 0x4c, 0x7b, 0x85, 0x19, 0xb3, 0x59,
	0xe4, 0x46, 0xf4, 0x30, 0x98, 0x52, 0x1e, 0xba, 0x09, 0xca, 0x8c, 0x63, 0xff, 0xb4, 0x00, 0xce,
	0x69, 0xe4, 0x4d, 0x46, 0x63, 0x5f, 0xfa, 0xa4, 0x0b, 0x95, 0xf7, 0x61, 0xdf, 0xda, 0xb3, 0x0e,
	0x3a, 0x5e, 0x25, 0x0e, 0xc9, 0x3e, 0xd4, 0xdf, 0x26, 0x92, 0xa7, 0xfd, 0xca, 0x9e, 0x75, 0xd0,
	0x1e, 0x76, 0x1d, 0x93, 0xc7, 0xd1, 0xa8, 0x57, 0x47, 0xf5, 0x21, 0xcf, 0xa0, 0xf9, 0x91, 0xc9,
	0x98, 0x26, 0xa2, 0x5f, 0xd5, 0xbc, 0x5e, 0xc1, 0x33, 0xb8, 0xd7, 0xa4, 0xd9, 0x82, 0x3c, 0x85,
	0xda, 0x07, 0x94, 0x7e, 0xbf, 0xa6, 0x89, 0x5b, 0x05, 0x51, 0x81, 0x5e, 0x6d, 0x81, 0xd2, 0xb7,
	0x05, 0x74, 0xde, 0xa8, 0xa2, 0x56, 0x4d, 0x8d, 0x0b, 0x53, 0x63, 0x65, 0x4a, 0xef, 0x17, 0xa6,
	0xf2, 0x06, 0x65, 0xaa, 0xba, 0xee, 0x08, 0x39, 0x84, 0xcd, 0x73, 0x1a, 0xf8, 0x2a, 0xab, 0x71,
	0xb5, 0x53, 0x10, 0xf3, 0x0d, 0x6f, 0x73, 0x6e, 0x56, 0xb6, 0x0b, 0x5b, 0x1a, 0x45, 0x0f, 0xbf,
	0x2e, 0x51, 0x48, 0xd2, 0x83, 0xea, 0x19, 0xa6, 0x26, 0x6d, 0x75, 0x86, 0x29, 0xe9, 0x80, 0x75,
	0xa1, 0x73, 0xd6, 0x3d, 0x2b, 0xb1, 0x7f, 0x59, 0xd0, 0xcd, 0x15, 0x82, 0xd1, 0x44, 0x20, 0xe9,
	0x43, 0xf3, 0x0c, 0xd3, 0x77, 0xbe, 0x98, 0x1a, 0x59, 0x73, 0x96, 0x85, 0xc4, 0x81, 0xf6, 0x84,
	0x63, 0x88, 0x01, 0x0a, 0x41, 0xb9, 0x31, 0xde, 0x71, 0xf4, 0x6d, 0x38, 0x9f, 0x13, 0x1a, 0xa2,
	0xd7, 0x66, 0xd7, 0x04, 0xf2, 0x1c, 0xe0, 0x72, 0x19, 0x64, 0x81, 0x6a, 0x6a, 0xf5, 0x16, 0x1d,
	0x44, 0xb1, 0x4f, 0x5c, 0x68, 0xe5, 0x15, 0x89, 0x7e, 0x4d, 0x93, 0xef, 0xa8, 0xb5, 0x95, 0xd7,
	0x2a, 0xec, 0x7d, 0xe8, 0x5d, 0x60, 0x44, 0x65, 0xfc, 0xbf, 0x7a, 0x6d, 0x1f, 0x76, 0x56, 0x58,
	0xa6, 0xc6, 0x27, 0x37, 0x9c, 0x59, 0xba, 0x1b, 0xab, 0x5e, 0x76, 0xa1, 0xa1, 0x0d, 0x0a, 0xd3,
	0xa9, 0xc6, 0x37, 0x1d, 0x91, 0x87, 0x50, 0x9f, 0x20, 0x9a, 0x62, 0x5a, 0x5e, 0x9d, 0xa9, 0x60,
	0xf8, 0xd7, 0x82, 0xcd, 0xfc, 0xae, 0xc9, 0x31, 0xb4, 0x4f, 0x51, 0x16, 0xe1, 0x8e, 0xa3, 0xfe,
	0x2f, 0xab, 0x93, 0x30, 0xb8, 0x0d, 0xd9, 0x1b, 0x4a, 0x76, 0x79, 0x0f, 0xd9, 0x2b, 0xe8, 0x7d,
	0xe2, 0x7e, 0x22, 0xbe, 0x20, 0x2f, 0xad, 0x3d, 0x81, 0x6d, 0x0f, 0xe7, 0xe8, 0x0b, 0x2c, 0x2b,
	0x1d, 0xfe, 0xae, 0x98, 0xcb, 0x42, 0xa5, 0x3a, 0x81, 0xce, 0x39, 0xa5, 0xb3, 0x25, 0x3b, 0xc3,
	0x54, 0xc5, 0x44, 0x4b, 0x6e, 0x0c, 0xe2, 0xe0, 0xc1, 0x0d, 0x2c, 0xbb, 0x06, 0xed, 0x7f, 0x2b,
	0x93, 0xaa, 0x01, 0x2b, 0xa9, 0x1d, 0xc1, 0x6e, 0x8e, 0xb1, 0x79, 0xac, 0x16, 0x61, 0x79, 0x03,
	0x63, 0x78, 0xbc, 0x7e, 0xc8, 0x3d, 0xac, 0xbc, 0x86, 0xce, 0xf5, 0x90, 0x4d, 0x46, 0xe4, 0x91,
	0xa6, 0xad, 0x4f, 0xe7, 0x60, 0x77, 0x1d, 0xce, 0x0f, 0x18, 0xfe, 0xb1, 0xa0, 0x91, 0xbd, 0x60,
	0xe4, 0x05, 0xb4, 0x2f, 0xf0, 0x7b, 0xf6, 0x34, 0x4d, 0x46, 0x64, 0xdb, 0x64, 0xcc, 0x5f, 0xb7,
	0xc1, 0x3a, 0x60, 0x6f, 0x28, 0xc9, 0x29, 0xca, 0x52, 0x92, 0x63, 0xd8, 0x9e, 0x70, 0xca, 0xa8,
	0xc0, 0x52, 0xb2, 0x23, 0xe8, 0x8e, 0xe8, 0x62, 0x11, 0x97, 0x4a, 0x76, 0xd5, 0xd0, 0xcf, 0xf4,
	0xcb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72, 0x68, 0x78, 0xb6, 0x3c, 0x06, 0x00, 0x00,
}
